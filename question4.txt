class Multiset:
    def __init__(self):
        self.items = []
        
    def add(self, val):
    #adds one occurrence of val from the multiset, if any
        return self.items.append(val)
        pass
    
    def removeAll(self, val):
        # removes all occurrence of val from #the multiset, if any
        while (self.items.count(val) > 0):
            self.items.remove(val)
        return self.items
        pass
    
    def remove(self, val):
        # removes one occurrence of val from the multiset, if any
        if self.items.count(val) != 0:
            return self.items.remove(val)
        pass
    
    def multiplicity(self, val):
        counter_b=self.items.count(val)
        return(counter_b)
        pass
    
    def union(self, newset):
        answer = self.items + newset.items
        templist=list(dict.fromkeys(answer))
        
        for i in templist:
            if((self.multiplicity(i))>(newset.multiplicity(i))):
                for k in range((newset.multiplicity(i)), 0, -1):
                    answer.remove(i)
            else:
                if((self.multiplicity(i))<(newset.multiplicity(i))):
                    for v in range((self.multiplicity(i)), 0, -1):
                        answer.remove(i)
               
        return answer
        pass
    
    def contains(self, val):
        # returns True when val is in the multiset, else returns False
        return val in self.items
    
    def intersection(self, newset):
        answer = Multiset()
        templist=list(dict.fromkeys(self.items+newset.items))
        
        for i in templist:
            if(self.contains(i) and newset.contains(i)):
                if(self.multiplicity(i)<newset.multiplicity(i)):
                    for k in range(0, self.multiplicity(i), 1):
                        answer.add(i)
                else:
                    if(self.multiplicity(i)>newset.multiplicity(i)):
                        for v in range(0, newset.multiplicity(i), 1):
                            answer.add(i)
                    else:
                        if(self.multiplicity(i)==newset.multiplicity(i)):
                            for v in range(0, newset.multiplicity(i), 1):
                                answer.add(i)
                        
        return answer.items
        pass
    
    def difference(self, newset):
        templist=list(dict.fromkeys(newset.items))
        for i in templist:
           if(self.contains(i) and newset.contains(i)):
               for k in range(0, newset.multiplicity(i), 1):
                   self.remove(i)
                   
        return self.items
    
    
if __name__ == '__main__':
    
    
    print("--adding an element--")
    add1 = Multiset()
    add1.items= [1,2,3]
    print("here is the multiset: "+str(add1.items))
    add1.add(1)
    print("here is the multiset after addition of 1: "+str(add1.items) )
    
    print("--removing all elements--")
    print("here is multiset before removal of 1: "+str(add1.items))
    add1.removeAll(1)
    print("here is multiset after removal of 1: "+str(add1.items))
    
    print("--multiplicity--")
    mult = Multiset()
    mult.items= [1,1,1,2,2,3]
    print("here is the multiset: "+str(mult.items))
    print("here is the multiplicity of 1: ")
    print(mult.multiplicity(1))
    
    print("--union--")
    union1=Multiset()
    union2=Multiset()
    
    union1.items= [1,2]
    union2.items= [2,2,3]
    print("here is the 1st multiset: "+str(union1.items))
    print("here is the 2nd multiset: "+str(union2.items))
    print("here is the union of both sets: ")
    print(union1.union(union2))
    
    print("--intersection--")
    intersection1= Multiset()
    intersection1.items = [1,1,2,2,3]
    print("here is the 1st multiset: "+str(intersection1.items))
    intersection2=Multiset()
    intersection2.items = [2,2,2,3,4]
    print("here is the 2nd multiset: "+str(intersection2.items))
    print("here is the intersection of both sets: ")
    print(intersection1.intersection(intersection2))
    
    print("--difference--")
    difference2= Multiset()
    difference2.items = [1, 2, 2, 2]
    
    print("here is the 1st multiset: "+str(intersection1.items))
    print("here is the 2nd multiset: "+str(difference2.items)) 
    print("here is the difference of both sets: ")
    print(intersection1.difference(difference2))
    